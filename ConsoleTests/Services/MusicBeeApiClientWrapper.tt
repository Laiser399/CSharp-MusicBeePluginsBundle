<#@ template language="C#" #>
<#@ assembly name="$(SolutionDir)\Module.MusicBee.MetaInfo\bin\Debug\Module.MusicBee.MetaInfo.dll" #>
<#@ assembly name="$(SolutionDir)\Module.MusicBee.MetaInfo.Proto\bin\Debug\Module.MusicBee.MetaInfo.Proto.dll" #>
<#@ assembly name="$(SolutionDir)\Root\bin\Debug\Root.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Module.MusicBee.MetaInfo.Entities" #>
<#@ import namespace="Module.MusicBee.MetaInfo.Extensions" #>
<#@ import namespace="Module.MusicBee.MetaInfo.Helpers" #>
<#@ import namespace="Module.MusicBee.MetaInfo.Proto.Extensions" #>
<#@ import namespace="Module.MusicBee.MetaInfo.Proto.Services" #>
<#@ import namespace="Root.Extensions" #>
<#@ import namespace="Root.Helpers" #>
//-------------------------
// Autogenerated using t4 |
//-------------------------
using System.Linq;
using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;
using Module.MusicBee.Enums;
using Module.MusicBee.Services.Abstract;

namespace ConsoleTests.Services
{
    public class MusicBeeApiClientWrapper : IBaseMusicBeeApi
    {
        private readonly MusicBeeApiService.MusicBeeApiServiceClient _client;
        
        public MusicBeeApiClientWrapper(MusicBeeApiService.MusicBeeApiServiceClient client)
        {
            _client = client;
        }
<#
    foreach (var method in _methods)
    {
        var returnType = method.ReturnParameter.Type.GetFixedName();
        var argumentsPart = GetArgumentsPart(method);
        var responseAssignment = method.HasAnyOutputParameters()
            ? "var response = "
            : string.Empty;
        var requestType = _namingService.GetRequestMessageType(method);
        var closing = method.HasInputParameters()
            ? string.Empty
            : "());";
#>
        
        public <#= returnType #> <#= method.Name #>(<#= argumentsPart #>)
        {
            <#= responseAssignment #>_client.<#= method.Name #>(new <#= requestType #><#= closing #>
<#
        if (method.HasInputParameters())
        {
#>
            {
<#
            foreach (var inputParameter in method.InputParameters)
            {
                var line = GetRequestPropertyAssignmentLine(inputParameter);
#>
                <#= line #>
<#
            }
#>
            });
<#
        }

        foreach (var outputParameter in method.OutputParameters)
        {
            var line = GetOutParameterAssignmentLine(outputParameter);
#>
            <#= line #>
<#
        }

        if (method.HasReturnType())
        {
#>
            <#= GetReturnLine(method) #>
<#
        }
#>
        }
<#
    }
#>
    }
}
<#+
    private readonly IReadOnlyCollection<MethodDefinition> _methods =
        MetaInfoProvider.GetMethodsWithoutRestrictions();

    private readonly ProtoNamingService _namingService = new(
        "Empty",
        "_Request",
        "_Response");

    private static string GetArgumentsPart(MethodDefinition method)
    {
        var inParams = method.InputParameters
            .Select(x => $"{GetCsTypeName(x)} {x.Name}");
        var outParams = method.OutputParameters
            .Select(x => $"out {GetCsTypeName(x)} {x.Name}");
        return string.Join(", ", inParams.Concat(outParams));
    }

    private static string GetCsTypeName(ParameterDefinition parameter)
    {
        var csTypeName = GetCsTypeName(parameter.Type);
        if (parameter.IsNullable)
        {
            csTypeName += "?";
        }

        return csTypeName;
    }

    private static string GetCsTypeName(Type type)
    {
        if (type.IsArray && type.HasElementType)
        {
            return $"{GetCsTypeName(type.GetElementType()!)}[]";
        }

        return type.GetFixedName();
    }

    private static string GetRequestPropertyAssignmentLine(ParameterDefinition parameter)
    {
        return GetRequestPropertyAssignmentLine(parameter.Type, parameter.Name);
    }

    private static string GetRequestPropertyAssignmentLine(Type parameterType, string parameterName)
    {
        string rightPart;
        if (parameterType.IsEnumerable() && parameterType.HasElementType)
        {
            var elementType = parameterType.GetElementType()!;
            if (elementType == typeof(byte))
            {
                rightPart = $"ByteString.CopyFrom({parameterName})";
            }
            else if (elementType.IsEnum)
            {
                rightPart = $"{{ {parameterName}.Cast<int>() }}";
            }
            else
            {
                rightPart = $"{{ {parameterName} }}";
            }
        }
        else if (parameterType.IsEnum)
        {
            rightPart = $"(int){parameterName}";
        }
        else
        {
            rightPart = parameterName;
        }

        return $"{parameterName.Capitalize()} = {rightPart},";
    }

    private static string GetOutParameterAssignmentLine(ParameterDefinition parameter)
    {
        var builder = new StringBuilder();

        builder.Append(parameter.Name);
        builder.Append(" = ");

        if (parameter.Type.IsEnum)
        {
            builder.Append($"({parameter.Type.Name})");
        }

        builder.Append($"response.{parameter.Name.Capitalize()}");

        if (parameter.Type.IsArray)
        {
            if (parameter.Type.HasElementType
                && parameter.Type.GetElementType()! == typeof(byte))
            {
                builder.Append(".ToByteArray()");
            }
            else
            {
                builder.Append(".ToArray()");
            }
        }

        builder.Append(";");

        return builder.ToString();
    }

    private string GetReturnLine(MethodDefinition method)
    {
        var enumCastPrefix = method.ReturnParameter.Type.IsEnum
            ? $"({method.ReturnParameter.Type.Name})"
            : string.Empty;
        return $"return {enumCastPrefix}response.Result;";
    }
#>