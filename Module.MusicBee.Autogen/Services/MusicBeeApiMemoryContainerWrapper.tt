<#@ template language="C#" #>
<#@ assembly name="$(SolutionDir)\Module.MusicBee.MetaInfo\bin\Debug\net472\Module.MusicBee.MetaInfo.dll"#>
<#@ assembly name="$(SolutionDir)\Root\bin\Debug\net472\Root.dll"#>
<#@ import namespace="Module.MusicBee.MetaInfo.Extensions" #>
<#@ import namespace="Module.MusicBee.MetaInfo.Helpers" #>
<#@ import namespace="Root.Extensions" #>
<#
    var methods = MetaInfoProvider.GetMethodsExceptObsolete();
#>
//-------------------------
// Autogenerated using t4 |
//-------------------------

using System;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using Mead.MusicBee.Enums;
using Mead.MusicBee.Services;
using Module.MusicBee.Autogen.Services.Abstract;

namespace Module.MusicBee.Autogen.Services
{
    public sealed class MusicBeeApiMemoryContainerWrapper : IMusicBeeApi
    {
        private readonly MusicBeeApiMemoryContainer _mbApi;
        
        public MusicBeeApiMemoryContainerWrapper(MusicBeeApiMemoryContainer mbApi)
        {
            _mbApi = mbApi;
        }
<#
    foreach (var method in methods)
    {
        var returnType = method.ReturnParameter.Type.GetFixedName();
        var classMethodArguments = method.GetClassMethodArguments();
        var returnPart = method.HasReturnType()
            ? "return "
            : string.Empty;
        var apiCallingArguments = method.GetMethodCallingArguments();
#>

        public <#= returnType #> <#= method.Name #>(<#= classMethodArguments #>)
        {
            <#= returnPart #>_mbApi.<#= method.Name #>(<#= apiCallingArguments #>);
        }
<#
    }
#>
    }
}