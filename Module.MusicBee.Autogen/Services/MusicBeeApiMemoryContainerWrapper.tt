<#@ template language="C#" #>
<#@ assembly name="$(SolutionDir)\Module.MusicBee.MetaInfo\bin\Debug\Module.MusicBee.MetaInfo.dll"#>
<#@ assembly name="$(SolutionDir)\Root\bin\Debug\Root.dll"#>
<#@ import namespace="Module.MusicBee.MetaInfo.Helpers" #>
<#@ import namespace="Root.Extensions" #>
<#@ import namespace="Module.MusicBee.MetaInfo.Entities" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Module.MusicBee.MetaInfo.Extensions" #>
<#
    var methods = MetaInfoProvider.GetMethodsExceptIgnored();
#>
//-------------------------
// Autogenerated using t4 |
//-------------------------

using System;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using Module.MusicBee.Autogen.Services.Abstract;
using Module.MusicBee.Enums;
using Module.MusicBee.Services;

namespace Module.MusicBee.Autogen.Services
{
    public sealed class MusicBeeApiMemoryContainerWrapper : IMusicBeeApi
    {
        private readonly MusicBeeApiMemoryContainer _mbApi;
        
        public MusicBeeApiMemoryContainerWrapper(MusicBeeApiMemoryContainer mbApi)
        {
            _mbApi = mbApi;
        }
<#
    foreach (var method in methods)
    {
        var returnType = method.ReturnParameter.Type.GetFixedName();
        var classMethodArguments = GetClassMethodArguments(method);
        var returnPart = method.HasReturnType()
            ? "return "
            : string.Empty;
        var apiCallingArguments = GetApiCallingArguments(method);
#>

        public <#= returnType #> <#= method.Name #>(<#= classMethodArguments #>)
        {
            <#= returnPart #>_mbApi.<#= method.Name #>(<#= apiCallingArguments #>);
        }
<#
    }
#>
    }
}
<#+
    private static string GetClassMethodArguments(MethodDefinition method)
    {
        var inParams = method.InputParameters
            .Select(x => $"{x.GetCSharpTypeName()} {x.Name}");
        var outParams = method.OutputParameters
            .Select(x => $"out {x.GetCSharpTypeName()} {x.Name}");
        return string.Join(", ", inParams.Concat(outParams));
    }

    private static string GetApiCallingArguments(MethodDefinition method)
    {
        var inParams = method.InputParameters
            .Select(x => x.Name);
        var outParams = method.OutputParameters
            .Select(x => $"out {x.Name}");
        return string.Join(", ", inParams.Concat(outParams));
    }
#>